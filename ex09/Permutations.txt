void Permute(string soFar, string rest)
{
    if (rest == "") { 
        cout << soFar << endl;
    } 
    else {
        for (int i = 0; i < rest.length(); i++) {
            string remaining = rest.substr(0, i) + rest.substr(i+1);
            Permute(soFar + rest[i], remaining);
        }
    }
}

Output:
	abc
	acb
	bac
	bca
	cab
	cba

Calls:
	Permute( "", "abc" )

	Permute( "a", "bc" )
	Permute( "ab", "c" )
	Permute( "abc", "" )
	
	Permute( "ac", "b" )
	Permute( "acb", "" )
	
	Permute( "b", "ac" )
	Permute( "ba", "c" )
	Permute( "bac", "" )
	
	Permute( "bc", "a" )
	Permute( "bca", "" )
	
	Permute( "c", "ab" )
	Permute( "ca", "b" )
	Permute( "cab", "" )
	
	Permute( "cb", "a" )
	Permute( "cba", "" )
	
Answers:

1. When invoked as Permute("","abc"), what does the function write to cout?
abc
acb
bac
bca
cab
cba

2. What is the base case (simplemost case) in the recursion? How is the problem size reduced in the recursive calls?
The base is when rest equals an empty string or "".
The problem size is reduced in the for loop when the program creates a string, named remaining, that takes a substring of the rest string.

